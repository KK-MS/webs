@startuml

title Server.cpp Part:2 (To Run Server)


start
 
:                      **int main**
note right: int main( int argc, char* argv[]); 


if ( Check command line) then (Try)
  : **if (argc != 3)** 
  *check for IP and Port No
  * Server address: << argc[1] )
  * Server port:  << argv[2] )
   *Server is starting ;
  
  
 
  
  
  :           **webserver_ setup(argv[1], argv[2])**
  server::server_setup (char *address char *port);

  note Left:This function helps in setting up the server.
  
 
  :                 **webserver_setOnInitEventListener**
  Pointer to function. 
  void <name of function>(std::string *name, std::string *value);

note left
 * This function sets on initialize listener
 * It means if unknown shared variable appears 
   server generates this event.
 * Listener is function where initialization should be done.
end note
 
 :                  **webserver_setOnUpdateEventListener**
  Pointer to function.
  void <name of function>(std::string *name, std::string *value);

note right
 * This function sets on update listener.
 *It means some shared variable was updated by client.
 * server updates shared value inside 
   and then generate this event.
 * So application can react somehow 
  (reconfiguration or something like that).
 end note

:       **webserver_setOnCommandEventListener**
Pointer to function
void <name of function>(std::string *message);

note left
* This function sets on command listener
* It means if client sent some message that starts with “command:” 
   server generates event.
 end note
 
  :  **webserver_run()**;
 
  note right
  *This function starts webserver.
  *So when this is called clients are able to connect a share data
 end note

:   **Output:**
*Server has started
*Press Ctrl+C to exit;


else (return)
  :1;

endif

:Catch;
: Error;


stop

@enduml